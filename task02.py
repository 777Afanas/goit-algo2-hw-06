# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
import random          # –ó–∞–ª–∏—à–µ–Ω–æ, —Ö–æ—á —ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
import mmh3            # –í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π –Ω–µ–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —Ö–µ—à-–∞–ª–≥–æ—Ä–∏—Ç–º
import math            # –î–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π (log, power)
import time            # –î–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (benchmark)
import json            # <--- –ù–û–í–ï: –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É JSON-—Ä—è–¥–∫—ñ–≤
from tabulate import tabulate # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É —Ç–∞–±–ª–∏—Ü—ñ

# --- –ö–ª–∞—Å HyperLogLog ---
class HyperLogLog:
    """
    –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É HyperLogLog –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
    (–∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤).
    """
    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—É
    def __init__(self, p=14): 
        # p: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ—Ç—ñ–≤ –¥–ª—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó (–≤–∏–∑–Ω–∞—á–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–≥—ñ—Å—Ç—Ä—ñ–≤)
        self.p = p
        # m: –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–≥—ñ—Å—Ç—Ä—ñ–≤, m = 2^p. (1 << p - —Ü–µ —à–≤–∏–¥—à–∏–π —Å–ø–æ—Å—ñ–± –æ–±—á–∏—Å–ª–∏—Ç–∏ 2^p)
        self.m = 1 << p
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è m —Ä–µ–≥—ñ—Å—Ç—Ä—ñ–≤ –Ω—É–ª—è–º–∏. 
        self.registers = [0] * self.m
        # alpha: –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—ó, –∑–∞–ª–µ–∂–Ω–∞ –≤—ñ–¥ m
        self.alpha = self._get_alpha()
        # –ü–æ—Ä–æ–≥–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–µ–∫—Ü—ñ—ó –º–∞–ª–∏—Ö –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤ (Linear Counting)
        self.small_range_correction = 5 * self.m / 2

    # –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ alpha_m
    def _get_alpha(self):
        """ –û–±—á–∏—Å–ª—é—î –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É alpha_m –¥–ª—è –∫–æ—Ä–µ–∫—Ü—ñ—ó –≥–∞—Ä–º–æ–Ω—ñ–π–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ. """
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–ª—å—à —Ç–æ—á–Ω—ñ —Ç–∏–ø–æ–≤—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ HLL:
        if self.m == 16: # p=4
            return 0.673
        elif self.m == 32: # p=5
            return 0.697
        elif self.m == 64: # p=6
            return 0.709
        # –î–ª—è m >= 128 (p >= 7) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞
        else: 
            return 0.7213 / (1 + 1.079 / self.m)

    # –ú–µ—Ç–æ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
    def add(self, item):
        """ –î–æ–¥–∞—î –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ. """
        # –•–µ—à—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —É 32-–±—ñ—Ç–æ–≤–µ –±–µ–∑–∑–Ω–∞–∫–æ–≤–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ
        x = mmh3.hash(str(item), seed=0xDEADBEEF, signed=False) 
        
        # j: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–ª–æ–¥—à—ñ p –±—ñ—Ç—ñ–≤ —Ö–µ—à—É —è–∫ —ñ–Ω–¥–µ–∫—Å —Ä–µ–≥—ñ—Å—Ç—Ä–∞
        j = x & (self.m - 1)
        
        # w: –°—Ç–∞—Ä—à—ñ (32-p) –±—ñ—Ç—ñ–≤ —Ö–µ—à—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è rho
        w = x >> self.p
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–≥—ñ—Å—Ç—Ä j –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º rho(w)
        self.registers[j] = max(self.registers[j], self._rho(w))

    # –ú–µ—Ç–æ–¥ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è rho
    def _rho(self, w):
        """ –û–±—á–∏—Å–ª—é—î –ø–æ–∑–∏—Ü—ñ—é –ø–µ—Ä—à–æ—ó (–Ω–∞–π–º–µ–Ω—à –∑–Ω–∞—á—É—â–æ—ó) –æ–¥–∏–Ω–∏—Ü—ñ + 1. """
        # –Ø–∫—â–æ —Å—Ç–∞—Ä—à—ñ –±—ñ—Ç–∏ (w) –Ω—É–ª—å–æ–≤—ñ
        if w == 0:
            return 32
        
        # –û–±—á–∏—Å–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –ø–µ—Ä—à–æ—ó 1 (Longest Run of Leading Zeros + 1)
        return 32 - w.bit_length() + 1 

    # –ú–µ—Ç–æ–¥ –æ—Ü—ñ–Ω–∫–∏ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
    def count(self):
        """ –û—Ü—ñ–Ω—é—î –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ñ—Å—Ç—å. """
        # Z: –û–±—á–∏—Å–ª–µ–Ω–Ω—è –≥–∞—Ä–º–æ–Ω—ñ–π–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ
        Z = sum(2.0 ** -r for r in self.registers)
        
        # E: –°–∏—Ä–∞ (Raw) –æ—Ü—ñ–Ω–∫–∞ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ: E = alpha * m^2 / Z
        E = self.alpha * self.m * self.m / Z
        
        # –ö–æ—Ä–µ–∫—Ü—ñ—è –º–∞–ª–∏—Ö –∑–Ω–∞—á–µ–Ω—å (Small Range Correction)
        if E <= self.small_range_correction:
            # V: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω—É–ª—å–æ–≤–∏—Ö —Ä–µ–≥—ñ—Å—Ç—Ä—ñ–≤
            V = self.registers.count(0) 
            if V > 0:
                # –õ—ñ–Ω—ñ–π–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: E = m * ln(m / V)
                return self.m * math.log(self.m / V)
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∏—Ä—É –æ—Ü—ñ–Ω–∫—É (–∞–±–æ —Å–∫–æ—Ä–∏–≥–æ–≤–∞–Ω—É, —è–∫—â–æ V=0)
        return E

# --- –ú–µ—Ç–æ–¥–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---

def load_data(filename="lms-stage-access.log"):
    """
    1. –ú–µ—Ç–æ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –æ–±—Ä–æ–±–ª—è—î –ª–æ–≥-—Ñ–∞–π–ª (—Ñ–æ—Ä–º–∞—Ç JSON Lines), 
    –≤–∏–ª—É—á–∞—é—á–∏ 'remote_addr' —Ç–∞ —ñ–≥–Ω–æ—Ä—É—é—á–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ä—è–¥–∫–∏.
    –ö–æ–¥ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–π –¥–æ –≤–µ–ª–∏–∫–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤ –¥–∞–Ω–∏—Ö (—á–∏—Ç–∞–Ω–Ω—è –ø–æ —Ä—è–¥–∫–∞—Ö).
    """
    # print(f"üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥ IP-–∞–¥—Ä–µ—Å —ñ–∑ —Ñ–∞–π–ª—É: {filename}...")
    ip_addresses = []
    
    try:
        # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É (—á–∏—Ç–∞–Ω–Ω—è –ø–æ —Ä—è–¥–∫–∞—Ö)
        with open(filename, 'r', encoding='utf-8') as f:
            for line in f:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ä—è–¥–æ–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π, —ñ –ø–æ—á–∞—Ç–æ–∫ —Å—Ö–æ–∂–∏–π –Ω–∞ JSON
                line = line.strip()
                if not line or not line.startswith('{'):
                    continue # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ä—è–¥–∫–∏
                
                try:
                    # –ü–∞—Ä—Å–∏–Ω–≥ JSON-—Ä—è–¥–∫–∞
                    record = json.loads(line)
                    # –í–∏–ª—É—á–µ–Ω–Ω—è IP-–∞–¥—Ä–µ—Å–∏ –∑ –∫–ª—é—á–∞ "remote_addr"
                    ip = record.get("remote_addr")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ IP-–∞–¥—Ä–µ—Å–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ —ñ –Ω–µ —î –ø–æ—Ä–æ–∂–Ω—å–æ—é
                    if ip:
                        # –î–æ–¥–∞—î–º–æ –∑–Ω–∞–π–¥–µ–Ω—É IP-–∞–¥—Ä–µ—Å—É –¥–æ —Å–ø–∏—Å–∫—É
                        ip_addresses.append(ip)
                except json.JSONDecodeError:
                    # –Ü–≥–Ω–æ—Ä—É—î–º–æ —Ä—è–¥–∫–∏, —è–∫—ñ –Ω–µ —î –∫–æ—Ä–µ–∫—Ç–Ω–∏–º JSON
                    continue
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –±—É–ª–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –¥–∞–Ω—ñ
        if not ip_addresses:
            print("‚ö†Ô∏è –§–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó IP-–∞–¥—Ä–µ—Å–∏.")
            raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
        
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(ip_addresses)} –∑–∞–ø–∏—Å—ñ–≤.")
        return ip_addresses
    
    except FileNotFoundError:
        # –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –§–∞–π–ª '{filename}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        print("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–±–æ –ø–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å 'lms-stage-access.log' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")
        # –í–∏–∫–∏–¥–∞—î–º–æ –≤–∏–Ω—è—Ç–æ–∫, —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±–µ–∑ –¥–∞–Ω–∏—Ö
        raise
    except ValueError:
        # –í–∏–∫–∏–¥–∞—î–º–æ –≤–∏–Ω—è—Ç–æ–∫, —è–∫—â–æ –¥–∞–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ
        raise

def count_exact(data):
    """
    2. –§—É–Ω–∫—Ü—ñ—è —Ç–æ—á–Ω–æ–≥–æ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö IP-–∞–¥—Ä–µ—Å.
    """
    start_time = time.perf_counter()
    # –¢–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–Ω–æ–∂–∏–Ω–∏ (set)
    unique_count = len(set(data))
    end_time = time.perf_counter()
    return unique_count, end_time - start_time

def count_hll(data, p=14):
    """
    3. –†–µ–∞–ª—ñ–∑—É—î –Ω–∞–±–ª–∏–∂–µ–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é HyperLogLog (–∑ –ø—Ä–∏–π–Ω—è—Ç–Ω–æ—é –ø–æ—Ö–∏–±–∫–æ—é).
    """
    start_time = time.perf_counter()
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ HLL
    hll = HyperLogLog(p=p)
    # –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    for item in data:
        hll.add(item)
    # –û—Ü—ñ–Ω–∫–∞ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
    estimated_count = hll.count()
    end_time = time.perf_counter()
    return estimated_count, end_time - start_time

# --- –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ —Å–∫—Ä–∏–ø—Ç—É ---
def main():
    try:
        # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –ª–æ–≥-—Ñ–∞–π–ª—É (JSONL —Ñ–æ—Ä–º–∞—Ç)
        all_ips = load_data()
    except Exception as e:
        # –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –¥–∞–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
        return
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ —É –ª–æ–∑—ñ
    total_records = len(all_ips)
    # print("-" * 50)
    
    # 2. —Ç–∞ 4. –¢–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫
    exact_count, exact_time = count_exact(all_ips)
    # print(f"‚è±Ô∏è –¢–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    # 3. —Ç–∞ 4. –ù–∞–±–ª–∏–∂–µ–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ HyperLogLog (p=14 –¥–∞—î ~0.8% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –ø–æ—Ö–∏–±–∫–∏)
    hll_count, hll_time = count_hll(all_ips, p=14)
    # print(f"‚è±Ô∏è HyperLogLog (p=14) –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    
    # print("-" * 50)
    
    # 4. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ö–∏–±–∫–∏
    absolute_error = abs(hll_count - exact_count)
    relative_error = (absolute_error / exact_count) * 100 if exact_count > 0 else 0
    
    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ
    table_data = [
        # ["–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤", f"{total_records:.0f}", f"{total_records:.0f}"],
        ["–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏", f"{exact_count:.0f}", f"{hll_count:.0f}"],
        ["–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫.)", f"{exact_time:.4f}", f"{hll_time:.4f}"],
        ["–ê–±—Å–æ–ª—é—Ç–Ω–∞ –ø–æ—Ö–∏–±–∫–∞", "N/A", f"{absolute_error:.2f}"],
        ["–í—ñ–¥–Ω–æ—Å–Ω–∞ –ø–æ—Ö–∏–±–∫–∞", "N/A", f"{relative_error:.2f} %"],
    ]
    
    # –í–∏–≤—ñ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    print("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:")
    # –í–∏–≤—ñ–¥ —Ç–∞–±–ª–∏—Ü—ñ
    print(tabulate(table_data, 
                   headers=["–ü–æ–∫–∞–∑–Ω–∏–∫", "–¢–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ (Set)", "HyperLogLog (HLL)"], 
                   tablefmt="fancy_grid", 
                   numalign="right"))

    # print("\nüí° –í–∏—Å–Ω–æ–≤–æ–∫:")
    # print(f"* HLL –∑–Ω–∞—á–Ω–æ **—à–≤–∏–¥—à–µ** (—á–∞—Å: {hll_time:.4f} —Å–µ–∫.) –∑–∞ —Ç–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ (—á–∞—Å: {exact_time:.4f} —Å–µ–∫.).")
    # print(f"* –î–æ—Å—è–≥–Ω—É—Ç–∞ –ø–æ—Ö–∏–±–∫–∞ HLL: **{relative_error:.2f} %** (–ø—Ä–∏–π–Ω—è—Ç–Ω–∞ –ø–æ—Ö–∏–±–∫–∞ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ).")
    # print(f"* –ö–æ–¥ —î –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–º –¥–æ –≤–µ–ª–∏–∫–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤ –¥–∞–Ω–∏—Ö, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î **–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–µ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É** —Ç–∞ **—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π –æ–±—Å—è–≥ –ø–∞–º'—è—Ç—ñ** –¥–ª—è HLL.")

# –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
if __name__ == "__main__":
    main()







